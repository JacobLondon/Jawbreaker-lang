-- This file contains some of the information regarding the future of Jawbreaker-lang.

-- like an import statement
include Animal

-- control statements
fn control_flow() begin
    -- for loops
    for(i in range(1, 10)) begin
        print(i);
    end

    -- uses python stuff:
    for(i, val in enumerate(range(1, 10))) begin
        print(i, val);
    end

    bool ready = true;

    -- while loops
    while(ready) begin
        break;
    end

    float a = 1.3;
    if(a != 1.3) begin
        return nil;
    end

    -- similar to a switch statement
    where(i) begin
        -- python statements
        (i > 10 and i < 20) begin
            print("tens");
        end
        (i < 0) begin
            print("negative");
        end
    end

    -- similar to a switch statement
    int i, j = 0;
    match(i, j) begin
        (0, 0) begin
            print("zero");
        end

        (_, 0) begin
            print("j is zero");
        end

        (0, _) begin
            print("i is zero");
        end
    end
end

class Animal begin
    fn constructor(name) begin
        self.name = name
    end
end

class Dog(Animal) begin
    -- static variables
    str type = "Dog";

    fn constructor(str name, int number, var info) begin
        super(name)
        int self.number = number;
        var self.info = info;
    end

    -- the to string method is dog.type
    fn to_str() begin
        return Dog.type;
    end
end

-- enum, assign 0, 1, 2, 3, ...
enum example begin
    ZERO,
    ONE,
    TWO,
    THREE,
    FOUR,
    FIVE
end

struct values begin
    int a, b, c, d;
end

fn main() begin
    control_flow();

    -- similar to python with args then kwargs
    d = Dog("Charlie", number=FIVE, info="Likes dog bones.");
    -- will print Dog.type
    print(d);

    vals = values(1, 2, 3, 4);
    -- will print 1
    print(vals.a);

    -- the program will exit
    exit();

    print("The program will never get here");
end